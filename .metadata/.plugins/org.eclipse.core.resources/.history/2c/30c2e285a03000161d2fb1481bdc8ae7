package Utils;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.cfg.Configuration;


public class SessionFactoryUtil {
	
	
	
	
	
	/** The single instance of hibernate SessionFactory */
	   private static final SessionFactory sessionFactory = buildSessionFactory();

	    private static SessionFactory buildSessionFactory(){
	        try{
	            SessionFactory sessionFactory = 
	                    new AnnotationConfiguration().configure().buildSessionFactory();
	            return sessionFactory;
	        }catch(Exception ex){
	            ex.printStackTrace();
	            throw new ExceptionInInitializerError(ex);
	        }
	    }



	/**
	 * disable contructor to guaranty a single instance
	 */
	private SessionFactoryUtil() {
	}

//	static{
// Annotation and XML
//		new AnnotationConfiguration().configure().buildSessionFactory();
// XML only
//    sessionFactory = new Configuration().configure().buildSessionFactory();
//  }

	public static SessionFactory getInstance() {
		
		System.out.println("SessionFactory getInstance()");
		return sessionFactory;
	}

  /**
   * Opens a session and will not bind it to a session context
   * @return the session
   */
	public Session openSession() {
		return sessionFactory.openSession();
	}

	/**
   * Returns a session from the session context. If there is no session in the context it opens a session,
   * stores it in the context and returns it.
	 * This factory is intended to be used with a hibernate.cfg.xml
	 * including the following property <property
	 * name="current_session_context_class">thread</property> This would return
	 * the current open session or if this does not exist, will create a new
	 * session
	 * 
	 * @return the session
	 */
	public Session getCurrentSession() {
		return sessionFactory.getCurrentSession();
	}

  /**
   * closes the session factory
   */
	public static void close(){
		if (sessionFactory != null)
			sessionFactory.close();
//		sessionFactory = null;
	
	}
}
